Now I think you have got an AC in Ignatius.L's "Max Sum" problem. To be a brave ACMer, we always challenge ourselves to more difficult problems. Now you are faced with a more difficult problem. 
	
Given a consecutive number sequence S 1, S 2, S 3, S 4 ... S x, ... S n (1 ≤ x ≤ n ≤ 1,000,000, -32768 ≤ S x ≤ 32767). We define a function sum(i, j) = S i + ... + S j (1 ≤ i ≤ j ≤ n). 
	
Now given an integer m (m > 0), your task is to find m pairs of i and j which make sum(i 1, j 1) + sum(i 2, j 2) + sum(i 3, j 3) + ... + sum(i m, j m) maximal (i x ≤ i y ≤ j x or i x ≤ j y ≤ j x is not allowed). 
	
But I`m lazy, I don't want to write a special-judge module, so you don't have to output m pairs of i and j, just output the maximal summation of sum(i x, j x)(1 ≤ x ≤ m) instead. ^_^ 
Input
Each test case will begin with two integers m and n, followed by n integers S 1, S 2, S 3 ... S n. 
Process to the end of file. 
Output
Output the maximal summation described above in one line. 
Sample Input
1 3 1 2 3
2 6 -1 4 -2 3 -2 3
Sample Output
6
8

HINT:
divide the array to several groups.
let dp[i][j] presents all elements before the i-th element and are divided into j groups. dp[i][j] also means, i must be selected(important!)

so the convertion is dp[i][j] = max(dp[i-1][j], max(dp[k][j-1]))+a[i]  k < i 
状态dp[i][j]有前j个数，组成i组的和的最大值。决策： 
第j个数，是在第包含在第i组里面，还是自己独立成组。
方程 dp[i][j]=Max(dp[i][j-1]+a[j] , max( dp[i-1][k] ) + a[j] ) 0<k<j
空间复杂度，m未知，n<=1000000，  继续滚动数组。 
时间复杂度 n^3. n<=1000000.  显然会超时，继续优化。
max( dp[i-1][k] ) 就是上一组 0....j-1 的最大值。
我们可以在每次计算dp[i][j]的时候记录下前j个的最大值 
用数组保存下来  下次计算的时候可以用，这样时间复杂
度为 n^2.
